/***********************************************************
    SCRIPT : CREACIÓN DE LA BASE DE DATOS CON POSTGRESQL
************************************************************/
------------------------------------------------------------
CREATE TABLE public.tipo_pelicula
(
    cod_tipopeli integer NOT NULL,
    nom_tipopeli character varying(50) NOT NULL,
    PRIMARY KEY (cod_tipopeli)
);

INSERT INTO public.tipo_pelicula
	VALUES 
	(1, 'Acción'),
	(2, 'Animación'),
    (3, 'Aventuras'),
    (4, 'Bélica'),
    (5, 'Ciencia Ficción'),
    (6, 'Comedia'),
    (7, 'Crimen'),
    (8, 'Documentales'),
    (9, 'Drama'),
    (10, 'Fantasía'),
    (11, 'Infantil'),
    (12, 'Musical'),
    (13, 'Terror'),
    (14, 'Suspenso'),
    (15, 'Romance'),
    (16, 'Western');
------------------------------------------------------------
CREATE TABLE public.calificacion
(
    cod_calific character(3) NOT NULL,
    descr_calific character varying(100) NOT NULL,
    PRIMARY KEY (cod_calific)
);

INSERT INTO public.calificacion(cod_calific, descr_calific)
	VALUES ('APT', 'Apta para todos los públicos'),
    ('+7', 'No recomendada para menores de 7 años'),
    ('+13', 'No recomendada para menores de 13 años'),
    ('+16', 'No recomendada para menores de 16 años'),
    ('+18', 'No recomendada para menores de 18 años');
------------------------------------------------------------ 
CREATE TABLE public.pelicula
(
    cod_pelicula integer NOT NULL,
    nom_peli character varying(200) NOT NULL,
    cod_tipopeli integer NOT NULL,
	descripcion text NULL,
	duracion integer NOT NULL,
	cod_calific character(3) NOT NULL,
	poster bytea NULL,
    PRIMARY KEY (cod_pelicula),
	CONSTRAINT fk_tp
		FOREIGN KEY (cod_tipopeli) REFERENCES public.tipo_pelicula(cod_tipopeli),
	CONSTRAINT fk_cal
		FOREIGN KEY (cod_calific) REFERENCES public.calificacion(cod_calific)
);

INSERT INTO public.pelicula VALUES 
(1, 'Toy Story', 3, 'Los juguetes de Andy, un niño de seis años, temen que un nuevo regalo les sustituya en el corazón de su dueño. Woody, un vaquero que ha sido hasta ahora el juguete favorito, trata de tranquilizarlos hasta que aparece Buzz Lightyear.', 80, 'APT', NULL),
(2, 'The Avengers', 1, 'El director de la Agencia SHIELD decide reclutar a un equipo para salvar al mundo de un desastre casi seguro cuando un enemigo inesperado surge como una gran amenaza para la seguridad mundial.', 143, '+13', NULL),
(3, 'Bohemian Rhapsody', 9, 'Londres, 1970. El joven Farrokh, Freddie para los amigos, trabaja en el aeropuerto, estudia diseño gráfico y escribe canciones. Un día, tras escuchar al grupo Smile en un bar, se ofrece como cantante de la banda al enterarse de que se han quedado sin vocalista.', 134, '+13', NULL),
(4, 'Volver al Futuro', 5, 'sdf', 145, '+13', NULL),
(5, 'El Señor de los anillos', 7, 'sdf', 230, '+13', NULL),
(6, 'El hobbit', 7, 'sdf', 245, '+13', NULL),
(7, 'Avatar', 1, 'sdf', 160, '+13', NULL),
(8, 'Donnie Darko', 5, 'sdf', 135, '+13', NULL),
(9, 'Madagascar', 3, 'sdf', 138, 'APT', NULL),
(10, 'Saw', 4, 'sdf', 133, '+18', NULL);

------------------------------------------------------------ 
CREATE TABLE public.cargo
(
    cod_cargo integer NOT NULL,
    nom_cargo character varying(100) NOT NULL,
    PRIMARY KEY (cod_cargo)
);

INSERT INTO public.cargo
	VALUES 
	(1, 'Cajero de boletería'),
	(2, 'Concesionario'),
	(3, 'Encargado de sala'),
	(4, 'Proyectista'),
	(5, 'Administrativo');
------------------------------------------------------------ 
CREATE TABLE public.cliente
(
    cod_cliente integer NOT NULL,
    nom_cl character varying(100) NOT NULL,
    ape_cl character varying(100) NOT NULL,
    dni_cl character varying(8) NOT NULL,
    email_cl character varying(200) NOT NULL,
    direccion_cl text NOT NULL,
    foto_cliente bytea,
    PRIMARY KEY (cod_cliente)
);

INSERT INTO public.cliente
	VALUES 
	(1, 'Luis', 'Gamarra Alcantara', '61614803', 'alcangama@gmail.com', 'Av. Parra Nº 313', NULL),
	(2, 'Paul', 'Gutierrez Manrique', '28423490', 'gutimanriq@gmail.com', 'Av. Perú Nº 232', NULL),
	(3, 'Juan', 'Martinez Lopez', '48804278', 'martlup@gmail.com', 'Av. Argentina Nº 221', NULL),
	(4, 'Leticia', 'Perez Alcantara', '39840290', 'leticia.martinez@gmail.com', 'Urb. Casa Blanca B-8', NULL),
	(5, 'Eduardo', 'Vallejo Pereida', '25481396', 'eduardo.vallejo@gmail.com', 'Av. Paisajista 407', NULL),
	(6, 'Nicolas', 'Morales Guillen', '62463044', 'nicoles.morales@gmail.com', 'Urb. Zafiro, B-11', NULL),
	(7, 'Adriana', 'Jordan Rodriguez', '48375787', 'adriana.jordan@gmail.com', 'Av. Porongoche, 606', NULL),
	(8, 'William', 'Hammond', '78948905', 'willian.hammond@gmail.com', 'Calle Cesar Vallejo', NULL),
	(9, 'Tookha', 'Garcia Ghoul', '77952485', 'tookhan.gacia@gmail.com', 'Calle 28 de julio,503', NULL),
	(10, 'Melman', 'Schwimmer', '64878851', 'melman.scwimmer@gmail.com', 'Urb. Los cipreses, A-9', NULL);
------------------------------------------------------------ 
CREATE TABLE public.empleado
(
    cod_empleado integer NOT NULL,
    nom_emp character varying(100) NOT NULL,
    ape_emp character varying(100) NOT NULL,
    cod_cargo integer NOT NULL,
    email_emp character varying(200) NOT NULL,
    direccion_emp text NOT NULL,
	salario numeric NOT NULL,
    foto_emp bytea,
    PRIMARY KEY (cod_empleado),
	CONSTRAINT fk_cargo
		FOREIGN KEY (cod_cargo) REFERENCES public.cargo(cod_cargo)
);

INSERT INTO public.empleado
	VALUES 
	(0, 'Cajero', 'Online', 1, 'tickets.upt@gmail.com', 'Av. Tacna y Arica 160', 0, NULL),
	(1, 'Guillermo', 'Smith Coppola', 1, 'smithgil@gmail.com', 'Av. Los Angeles Nº 542', 1500, NULL),
	(2, 'Eduardo', 'Vallejo Pereira', 2, 'perava@gmail.com', 'Av. Las Vegas Nº 123', 1000, NULL),
	(3, 'Adriana', 'Jordan Rodriguez', 5, 'rojodri@gmail.com', 'Av. Las Malvinas Nº 213', 1700, NULL),
	(4, 'Andrea', 'Valdivia Segalez', 2, 'andrea.valdivia@gmail.com', 'Calle Amauta, 138', 1000, NULL),
	(5, 'Mario', 'Diaz Torres', 5, 'maria.diaz@gmail.com', 'Av. Los Acres, 64', 1700, NULL),
	(6, 'Melman', 'Schwimmer', 2, 'melman.shwimmer@gmail.com', 'Urb. Los cipreses, A-9', 1000, NULL),
	(7, 'Jennifer', 'Anco Mamani', 1, 'jennifer.anco@gmail.com', 'Av. Independecia, 71', 1500, NULL),
	(8, 'Alex', 'Cruz Leon', 2, 'alex.cruz@gmail.com', 'Urb. Los cipreses, 71', 1000, NULL),
	(9, 'Jose', 'Perez Rodriguez', 5, 'jose.perez@gmail.com', 'Av. Argentina, 256', 1700, NULL),
	(10, 'Juan Jose', 'Molina Quispe', 2, 'juan.molina@gmail.com', 'Calle Tahuaycani 312', 1000, NULL);
------------------------------------------------------------
CREATE TABLE public.sala
(
    cod_sala integer NOT NULL,
    capacidad integer NOT NULL,
    PRIMARY KEY (cod_sala)
);
------------------------------------------------------------
CREATE TABLE public.funcion
(
	cod_funcion integer NOT NULL,
	cod_pelicula integer NOT NULL,
	cod_sala integer NOT NULL,
	fecha_funcion date NOT NULL DEFAULT CURRENT_DATE,
	hora_inicio time NOT NULL,
	precio numeric NOT NULL,
	PRIMARY KEY (cod_funcion),
	CONSTRAINT fk_peli
		FOREIGN KEY (cod_pelicula) REFERENCES public.pelicula(cod_pelicula),
	CONSTRAINT fk_sala
		FOREIGN KEY (cod_sala) REFERENCES public.sala(cod_sala)
);
------------------------------------------------------------
CREATE TABLE public.entrada
(
	cod_ticket integer NOT NULL,
	cod_funcion integer NOT NULL,
	cod_cliente integer NOT NULL,
	cod_cajero integer NOT NULL,
	fecha_compra date NOT NULL DEFAULT CURRENT_DATE,
	asiento char(4) NOT NULL,
	PRIMARY KEY (cod_ticket),
	CONSTRAINT fk_fun
		FOREIGN KEY (cod_funcion) REFERENCES public.funcion(cod_funcion),
	CONSTRAINT fk_cli
		FOREIGN KEY (cod_cliente) REFERENCES public.cliente(cod_cliente),
	CONSTRAINT fk_caje
		FOREIGN KEY (cod_cajero) REFERENCES public.empleado(cod_empleado)
);
------------------------------------------------------------

CREATE TABLE IF NOT EXISTS public.venta_producto
(
    cod_venta integer NOT NULL,
    cod_cliente integer NOT NULL,
	cod_vendedor integer NOT NULL,
    fecha_venta date NOT NULL,
	cantidad integer NOT NULL,
	monto_total numeric NOT NULL,
    PRIMARY KEY (cod_venta),
    CONSTRAINT fk_comprador FOREIGN KEY (cod_cliente) REFERENCES public.cliente(cod_cliente) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT fk_vendedor FOREIGN KEY (cod_vendedor) REFERENCES public.empleado(cod_empleado) ON UPDATE CASCADE ON DELETE RESTRICT
);
-------------------------------------------
CREATE TABLE IF NOT EXISTS producto
(
	cod_producto integer NOT NULL,
	nombre character varying(50) NOT NULL,
	precio integer NOT NULL,
	tipo character varying(50) NOT NULL,
	PRIMARY KEY (cod_producto)
);
INSERT INTO public.producto
	VALUES 
	(1, 'Gaseosa', 10, 'unitario'),
	(2, 'Palomitas de Maiz', 15, 'unitario'),
	(3, 'Chocolate', 8, 'unitario'),
	(4, 'Refresco', 12, 'unitario'),
	(5, 'Vizzio', 5, 'unitario'),
	(6, '1 Canchita Gigante + 2 Bebidas (21oz)', 40, 'combo'),
	(7, '2 Canchita Gigante + 2 Bebidas (21oz) ', 45, 'combo'),
	(8, '1 Canchita Grande + 2 Bebidas Medianas', 30, 'combo'),
	(9, '1 Canchita Grande + 2 Bebidas Pequeñas', 25, 'combo'),
	(10, '1 Canchita Gigante + 1 Bebidas Medianas', 20, 'combo');
------------------------------------------------
CREATE TABLE public.alquiler_sala
(
	cod_alquiler integer NOT NULL,
	cod_sala integer NOT NULL,
	fecha_evento date NOT NULL DEFAULT CURRENT_DATE,
	hora_inicio time NOT NULL,
	precio numeric NOT NULL,
	PRIMARY KEY (cod_alquiler),
	CONSTRAINT fk_sala2
		FOREIGN KEY (cod_sala) REFERENCES public.sala(cod_sala)
);
-----SECUENCIADORES
CREATE SEQUENCE IF NOT EXISTS public.seq_venta INCREMENT 1 START 1000;
CREATE SEQUENCE IF NOT EXISTS public.seq_producto INCREMENT 1 START 100;
CREATE SEQUENCE public.seq_tickets    INCREMENT 1     START 1000;
CREATE SEQUENCE public.seq_funciones     INCREMENT 1    START 100;
CREATE SEQUENCE public.seq_clientes    INCREMENT 1    START 300;